from django.shortcuts import render
from .service import NucleiTool, NiktoTool, NmapTool, ReverseIPLookup, IPGeoLookup, SslyzeTool

def index(request):
    return render(request, 'index.html')

def nuclei_tool(request):
    result = None
    target = None
    if request.method == 'POST':
        target = request.POST.get('target')
        nuclei = NucleiTool(target)
        result = nuclei.scan()
    
    return render(request, 'nuclei.html', {'result': result, 'target': target})

def nmap_tool(request):
    scan_result = None
    ip_address = None
    if request.method == 'POST':
        ip_address = request.POST.get('ip_address')
        nmap_tool = NmapTool(ip_address)
        scan_result = nmap_tool.scan()
    
    return render(request, 'nmap.html', {'scan_result': scan_result, 'ip_address': ip_address})

def nikto_tool(request):
    nikto_result = None
    target = None
    if request.method == 'POST':
        target = request.POST.get('target')
        nikto = NiktoTool(target)
        nikto_result = nikto.scan()
    
    return render(request, 'nikto.html', {'nikto_result': nikto_result, 'target': target})

def reverse_ip_dns_tool(request):
    domain_name = None
    error_message = None
    if request.method == 'POST':
        ip_address = request.POST['ip_address']
        reverse_ip_tool = ReverseIPLookup(ip_address)
        domain_name = reverse_ip_tool.lookup()
        if not domain_name:
            error_message = "Reverse IP-DNS sorgulaması başarısız oldu."
    
    return render(request, 'reverse_ip_lookup.html', {'domain_name': domain_name, 'error_message': error_message})

def ip_geo_lookup(request):
    ip_geo_data = None
    error_message = None
    if request.method == 'POST':
        ip_address = request.POST.get('ip_address')
        ip_geo_tool = IPGeoLookup(ip_address)
        ip_geo_data = ip_geo_tool.lookup()
        if not ip_geo_data:
            error_message = "IP Geo sorgulaması başarısız oldu."
    
    return render(request, 'ip_geo_lookup.html', {'ip_geo_data': ip_geo_data, 'error_message': error_message})

def sslyze_tool(request):
    sslyze_result = None
    target = None
    if request.method == 'POST':
        target = request.POST.get('target')
        sslyze = SslyzeTool(target)
        sslyze_result = sslyze.scan()
    
    return render(request, 'sslyze.html', {'sslyze_result': sslyze_result, 'target': target})
