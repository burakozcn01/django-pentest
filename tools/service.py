from config import settings
import requests, subprocess, nmap

class BaseTool:
    def __init__(self, target):
        self.target = target

    def run_command(self, cmd):
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            raise RuntimeError(f"Command failed: {' '.join(cmd)}")
        return result.stdout

class NucleiTool(BaseTool):
    def scan(self):
        cmd = [settings.NUCLEI_PATH, '-target', self.target, '-silent']
        return self.run_command(cmd)

class NiktoTool(BaseTool):
    def scan(self):
        cmd = ['nikto', '-h', self.target]
        return self.run_command(cmd)

class NmapTool(BaseTool):
    def __init__(self, ip_address):
        self.ip_address = ip_address

    def scan(self):
        nm = nmap.PortScanner()
        nm.scan(self.ip_address, ports='22,23,80,110,143,443,3389', arguments='-T4')
        scan_result = []
        for proto in nm[self.ip_address].all_protocols():
            lport = nm[self.ip_address][proto].keys()
            for port in lport:
                scan_result.append({
                    'protocol': proto,
                    'port': port,
                    'state': nm[self.ip_address][proto][port]['state'],
                    'service': nm[self.ip_address][proto][port]['name']
                })
        return scan_result

class ReverseIPLookup:
    def __init__(self, ip_address):
        self.ip_address = ip_address

    def lookup(self):
        cmd = ['host', self.ip_address]
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            return None
        output = result.stdout
        domain_name = output.split(' ')[-1].strip()[:-1]
        return domain_name

class IPGeoLookup:
    def __init__(self, ip_address):
        self.ip_address = ip_address

    def lookup(self):
        url = f"https://api.hackertarget.com/ipgeo/?q={self.ip_address}"
        try:
            response = requests.get(url)
            data = response.text.split('\n')
            return {
                'ip_address': self.ip_address,
                'country': data[1].split(':')[-1].strip(),
                'state': data[2].split(':')[-1].strip(),
                'city': data[0].split(':')[-1].strip(),
                'latitude': float(data[4].split(':')[-1].strip()),
                'longitude': float(data[5].split(':')[-1].strip()),
            }
        except Exception:
            return None

class SslyzeTool(BaseTool):
    def scan(self):
        cmd = ['sslyze', self.target]
        return self.run_command(cmd)
